./in/cljlib-predicates.fnl
3: use cljlib.zero? instead of (= 0 ...)
(= 0 x)
4: use cljlib.zero? instead of (= 0 ...)
(= x 0)
7: use cljlib.nil? instead of (= nil ...)
(= nil x)
8: use cljlib.nil? instead of (= nil ...)
(= x nil)
10: use cljlib.pos? instead of (> ... 0)
(> x 0)
10: avoid using >
(> x 0)
11: use cljlib.pos? instead of (< 0 ...)
(< 0 x)
13: use cljlib.neg? instead of (< ... 0)
(< x 0)
14: use cljlib.neg? instead of (> 0 ...)
(> 0 x)
14: avoid using >
(> 0 x)
16: use cljlib.zero? instead of (= 0 ...)
(= 0 (% x 2))
17: use cljlib.zero? instead of (= 0 ...)
(= (% x 2) 0)
19: use cljlib.odd? instead of (not= 0 (% ... 2))
(not= 0 (% x 2))
20: use cljlib.odd? instead of (not= 0 (% ... 2))
(not= (% x 2) 0)
21: use cljlib.odd? instead of (= 1 (% ... 2))
(= 1 (% x 2))
22: use cljlib.odd? instead of (= 1 (% ... 2))
(= (% x 2) 1)
24: use cljlib.string? instead of (= :string (type ...))
(= :string (type x))
25: use cljlib.string? instead of (= :string (type ...))
(= (type x) :string)
27: use cljlib.boolean? instead of (= :boolean (type ...))
(= :boolean (type x))
28: use cljlib.boolean? instead of (= :boolean (type ...))
(= (type x) :boolean)
30: use cljlib.true? instead of (= true ...)
(= true x)
31: use cljlib.true? instead of (= true ...)
(= x true)
33: use cljlib.false? instead of (= false ...)
(= false x)
34: use cljlib.false? instead of (= false ...)
(= x false)

